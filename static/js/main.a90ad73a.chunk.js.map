{"version":3,"sources":["SortVisualizer.js","InsertionSort.js","SelectionBar.js","App.js","reportWebVitals.js","index.js"],"names":["Element","styled","div","height","current","ElementWrapper","SortVisualizer","props","change","index","array","isSorted","length","temp","insertionSort","state","updatedArray","setState","setTimeout","algorithm","Array","from","x","i","Math","random","console","log","this","onClick","map","React","Component","SelectionBar","close","render","AppBar","position","Toolbar","variant","IconButton","edge","color","aria-label","popupId","popupState","Fragment","bindHover","Menu","bindMenu","options","option","MenuItem","toggle","Typography","BoxStyled","motion","attrs","initial","variants","Box","visible","opacity","transition","duration","hidden","App","update","active","algorithms","animate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a90ad73a.chunk.js","sourcesContent":["import { motion } from 'framer-motion';\r\nimport styled from 'styled-components';\r\nimport React, { useState } from 'react';\r\nimport { insertionSort } from \"./InsertionSort.js\"\r\n\r\nconst Element = styled.div(({height, current}) => (`\r\n    background: ${current ? 'red' : 'green'};\r\n    width: 0.3vw;\r\n    height: ${height}px;\r\n    align-self: flex-end;\r\n    margin: 1px;\r\n`));\r\n\r\nconst ElementWrapper = styled.div`\r\n    display: flex;\r\n    background: white;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n`;\r\n\r\nclass SortVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            index: 0,\r\n            algorithm: -1\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const array = Array.from({length: 100}, (x, i) => Math.random()*200);\r\n        \r\n        console.log(array);\r\n\r\n        this.setState({\r\n            array: array, \r\n        });\r\n    }\r\n\r\n    change = () => {\r\n        if(this.props.index === 0) {            \r\n            let [index, isSorted, updatedArray] = insertionSort(this.state.array)\r\n            this.setState({\r\n                array: updatedArray, \r\n                index: index\r\n            });\r\n\r\n            if (!isSorted){\r\n                setTimeout(\r\n                    this.change, 8\r\n                );\r\n            }\r\n        }\r\n    };\r\n    \r\n\r\n\r\n    render() {\r\n        if(this.state.algorithm != this.props.index) {\r\n            this.change()\r\n            this.setState({algorithm: this.props.index})\r\n        }\r\n\r\n\r\n        return ( \r\n            <ElementWrapper onClick={this.change}>\r\n                {this.state.array.map((height,i) => <Element height={height} current={this.state.index === i}/>)}\r\n            </ElementWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SortVisualizer;\r\n","export function insertionSort(array) {\r\n    let index = 0\r\n    let isSorted = true\r\n    while (index < array.length - 1) {\r\n        if (array[index] > array[index+1]){\r\n            let temp = array[index+1];\r\n            array[index+1] = array[index]\r\n            array[index] = temp\r\n            isSorted = false\r\n            break\r\n        }\r\n        index++\r\n    }\r\n    return [isSorted ? -1 : index, isSorted, array]\r\n}\r\n","import styled from 'styled-components';\r\nimport React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport {AppBar, IconButton, Menu, MenuItem, Toolbar, Typography} from '@material-ui/core'\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport PopupState, { bindHover, bindTrigger, bindMenu } from 'material-ui-popup-state';\r\n\r\n\r\nconst Header = styled.div`\r\n      display: flex;\r\n      background: blue;\r\n      width: 60%;\r\n      height: 10%;\r\n    `;\r\n\r\nclass SelectionBar extends React.Component {\r\n\r\n  \r\n  close = () => {\r\n\r\n  }\r\n\r\n  /*\r\n  import * as React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nexport function Example() {\r\n  return (\r\n    <motion.div\r\n      style={{\r\n        width: 150,\r\n        height: 150,\r\n        borderRadius: 30,\r\n        backgroundColor: \"#fff\"\r\n      }}\r\n      whileHover={{ scale: 0.8 }}\r\n    />\r\n  );\r\n}\r\n  */\r\n\r\n  render = () => { \r\n    return(\r\n      <AppBar position=\"fixed\">\r\n         <Toolbar variant=\"dense\">\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n\r\n            <PopupState variant=\"contained\" popupId=\"popup-menu\">\r\n            {(popupState) => (\r\n                <React.Fragment>\r\n                  <MenuIcon {...bindHover(popupState)}>\r\n                    Open Menu\r\n                  </MenuIcon>\r\n                  <Menu {...bindMenu(popupState)}>\r\n                    {this.props.options.map((option) => (  \r\n                      <React.Fragment>\r\n                        <MenuItem onClick={() => this.props.toggle(option)}>{option}</MenuItem>\r\n                      </React.Fragment>\r\n                    ))}\r\n                  </Menu>\r\n                </React.Fragment>\r\n              )} \r\n            </PopupState>\r\n\r\n\r\n          </IconButton>\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n            Visualizations\r\n          </Typography>\r\n        </Toolbar>\r\n    </AppBar>\r\n   \r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default SelectionBar;","//import './App.css';\nimport SortVisualizer from './SortVisualizer.js'\nimport SelectionBar from './SelectionBar.js'\nimport React from 'react';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\n\n\n\nconst BoxStyled = styled(motion.div).attrs(() => ({\n  initial: \"hidden\",\n  variants}))`\n    display: flex;\n    background: blue;\n    width: 150px;\n    height: 150px;\n  `;\n\n  const Box = styled(motion.div)`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  background: white;\n  width: 100vw;\n  height: 100vh;\n`;\n\n\nconst variants = {\n  visible: { opacity: 1, transition: { duration: 3 } },\n  hidden: { opacity: 0 }\n};\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      algorithms : ['insertionsort', 'othersort'],\n      active: 'othersort'\n    }\n  }\n\n  update = (state) => {\n    this.setState({active: state})\n  }\n\n\n\n  render = () => {\n    return (\n      <Box>\n        {this.state.active}\n        <SelectionBar options={this.state.algorithms} toggle={this.update}/>\n        <BoxStyled animate=\"visible\"/>\n        <SortVisualizer index={this.state.active === 'insertionsort' ? 0 : 1}/>\n      </Box>\n      )\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["SortVisualizer.js","InsertionSort.js","App.js","reportWebVitals.js","index.js"],"names":["Element","styled","div","height","current","ElementWrapper","SortVisualizer","props","change","array","index","length","temp","isSorted","insertionSort","state","updatedArray","console","log","setState","setTimeout","Array","from","x","i","Math","random","this","onClick","map","React","Component","BoxStyled","motion","attrs","initial","variants","Box","visible","opacity","transition","duration","hidden","App","animate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+ZAKA,IAAMA,EAAUC,IAAOC,KAAI,gBAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,QAAV,kCACTA,EAAU,MAAQ,QADT,6CAGbD,EAHa,yDAQrBE,EAAiBJ,IAAOC,IAAV,KAqELI,E,kDA7DX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAqBVC,OAAS,WAAO,IAAD,EC3CZ,SAAuBC,GAE1B,IADA,IAAIC,EAAQ,EACLA,EAAQD,EAAME,OAAS,GAAG,CAC7B,GAAIF,EAAMC,GAASD,EAAMC,EAAM,GAAG,CAC9B,IAAIE,EAAOH,EAAMC,EAAM,GACvBD,EAAMC,EAAM,GAAKD,EAAMC,GACvBD,EAAMC,GAASE,EACf,MAEJF,IAEJ,IAAMG,EAAWH,IAAUD,EAAME,OAAS,EAC1C,MAAO,CAACE,GAAY,EAAIH,EAAOG,EAAUJ,GDgCCK,CAAc,EAAKC,MAAMN,OADpD,mBACNC,EADM,KACCG,EADD,KACWG,EADX,KAEXC,QAAQC,IAAI,EAAKH,MAAML,MAAOA,EAAOG,GACrC,EAAKM,SAAS,CACVV,MAAOO,EACPN,MAAOA,IAGNG,GACDO,WACI,EAAKZ,OAAQ,KA9BrB,EAAKO,MAAQ,CACTN,MAAO,GACPC,MAAO,GAJI,E,gEASf,IAAMD,EAAQY,MAAMC,KAAK,CAACX,OAAQ,MAAM,SAACY,EAAGC,GAAJ,OAAwB,IAAdC,KAAKC,YAEvDT,QAAQC,IAAIT,GAEZkB,KAAKR,SAAS,CACVV,MAAOA,IAGXW,WACGO,KAAKnB,OAAQ,O,+BAqBV,IAAD,OACL,OACI,cAACH,EAAD,CAAgBuB,QAASD,KAAKnB,OAA9B,SACKmB,KAAKZ,MAAMN,MAAMoB,KAAI,SAAC1B,EAAOqB,GAAR,OAAc,cAACxB,EAAD,CAASG,OAAQA,EAAQC,QAAS,EAAKW,MAAML,QAAUc,a,GA3C9EM,IAAMC,W,yREdnC,IAAMC,EAAY/B,YAAOgC,IAAO/B,KAAKgC,OAAM,iBAAO,CAChDC,QAAS,SACTC,cAFgBnC,CAAH,KASPoC,EAAMpC,YAAOgC,IAAO/B,IAAdD,CAAH,KAOLmC,EAAW,CACfE,QAAS,CAAEC,QAAS,EAAGC,WAAY,CAAEC,SAAU,IAC/CC,OAAQ,CAAEH,QAAS,IAaNI,MAVf,WACE,OACA,qCACE,cAACX,EAAD,CAAWY,QAAQ,YACnB,cAACP,EAAD,IACA,cAAC,EAAD,QCpBWQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ab82f7af.chunk.js","sourcesContent":["import { motion } from 'framer-motion';\r\nimport styled from 'styled-components';\r\nimport React, { useState } from 'react';\r\nimport { insertionSort } from \"./InsertionSort.js\"\r\n\r\nconst Element = styled.div(({height, current}) => (`\r\n    background: ${current ? 'red' : 'green'} ;\r\n    width: 10px;\r\n    height: ${height}px;\r\n    align-self: flex-end;\r\n    margin: 1px;\r\n`));\r\n\r\nconst ElementWrapper = styled.div`\r\n    display: flex;\r\n    background: yellow;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n`;\r\n\r\nclass SortVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            index: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const array = Array.from({length: 100}, (x, i) => Math.random()*200);\r\n        \r\n        console.log(array);\r\n\r\n        this.setState({\r\n            array: array, \r\n        });\r\n\r\n        setTimeout(\r\n           this.change, 100\r\n        );\r\n    }\r\n\r\n    change = () => {\r\n        let [index, isSorted, updatedArray] = insertionSort(this.state.array)\r\n        console.log(this.state.index, index, isSorted)\r\n        this.setState({\r\n            array: updatedArray, \r\n            index: index\r\n        });\r\n\r\n        if (!isSorted){\r\n            setTimeout(\r\n                this.change, 10\r\n            );\r\n        }\r\n      };\r\n    \r\n\r\n\r\n    render() {\r\n        return ( \r\n            <ElementWrapper onClick={this.change}>\r\n                {this.state.array.map((height,i) => <Element height={height} current={this.state.index === i}/>)}\r\n            </ElementWrapper>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst SortVisualizer2 = (viz) => {\r\nconst [count, setCount] = useState([<Element height={100}/>,<Element height={200}/>,<Element height={300}/>]);\r\n  return(\r\n  <ElementWrapper>\r\n    {viz.map((x) => x)}\r\n  </ElementWrapper>)\r\n}\r\n\r\n\r\n\r\n\r\nexport default SortVisualizer;\r\n","export function insertionSort(array) {\r\n    let index = 0\r\n    while (index < array.length - 1) {\r\n        if (array[index] > array[index+1]){\r\n            let temp = array[index+1];\r\n            array[index+1] = array[index];\r\n            array[index] = temp;\r\n            break;\r\n        }\r\n        index++\r\n    }\r\n    const isSorted = index === array.length - 2\r\n    return [isSorted ? -1 : index, isSorted, array]\r\n}\r\n","//import './App.css';\nimport SortVisualizer from './SortVisualizer.js'\n\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\n\nconst BoxStyled = styled(motion.div).attrs(() => ({\n  initial: \"hidden\",\n  variants}))`\n    display: flex;\n    background: blue;\n    width: 150px;\n    height: 150px;\n  `;\n\n  const Box = styled(motion.div)`\n  background: red;\n  width: 150px;\n  height: 150px;\n`;\n\n\nconst variants = {\n  visible: { opacity: 1, transition: { duration: 3 } },\n  hidden: { opacity: 0 }\n};\n\nfunction App() {\n  return (\n  <>\n    <BoxStyled animate=\"visible\"/>\n    <Box/>\n    <SortVisualizer/>\n  </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
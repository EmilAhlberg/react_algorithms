{"version":3,"sources":["InsertionSort.js","SortVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["insertionSort","array","i","length","temp","Element","styled","div","height","ElementWrapper","SortVisualizer","props","change","console","log","setState","state","viz","Array","from","x","Math","random","this","onClick","map","React","Component","BoxStyled","motion","attrs","initial","variants","Box","visible","opacity","transition","duration","hidden","App","animate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAAO,SAASA,EAAcC,GAI1B,IAFA,IAAIC,EAAI,EAEDA,EAAID,EAAME,OAAS,GAAG,CACzB,GAAIF,EAAMC,GAAKD,EAAMC,EAAE,GAAG,CACtB,IAAIE,EAAOH,EAAMC,EAAE,GACnBD,EAAMC,EAAE,GAAKD,EAAMC,GACnBD,EAAMC,GAAKE,EACX,MAEJF,IAGJ,OAAOD,E,4KCTX,IAAMI,EAAUC,IAAOC,KAAI,gBAAEC,EAAF,EAAEA,OAAF,wEAGbA,EAHa,yDAQrBC,EAAiBH,IAAOC,IAAV,KAiELG,E,kDAzDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAiBVC,OAAS,WACLC,QAAQC,IAAI,QACZ,EAAKC,SAAS,CACVd,MAAQD,EAAc,EAAKgB,MAAMf,UAnBrC,EAAKe,MAAQ,CACTf,MAAO,GACPgB,IAAK,IAJM,E,gEASf,IAAMhB,EAAQiB,MAAMC,KAAK,CAAChB,OAAQ,KAAK,SAACiB,EAAGlB,GAAJ,OAAwB,IAAdmB,KAAKC,YAEtDT,QAAQC,IAAIb,GAEZsB,KAAKR,SAAS,CACVd,MAAOA,M,+BAsBX,OACI,cAACQ,EAAD,CAAgBe,QAASD,KAAKX,OAA9B,SACKW,KAAKP,MAAMf,MAAMwB,KAAI,SAAAjB,GAAM,OAAI,cAACH,EAAD,CAASG,OAAQA,a,GAvCpCkB,IAAMC,W,yRCdnC,IAAMC,EAAYtB,YAAOuB,IAAOtB,KAAKuB,OAAM,iBAAO,CAChDC,QAAS,SACTC,cAFgB1B,CAAH,KASP2B,EAAM3B,YAAOuB,IAAOtB,IAAdD,CAAH,KAOL0B,EAAW,CACfE,QAAS,CAAEC,QAAS,EAAGC,WAAY,CAAEC,SAAU,IAC/CC,OAAQ,CAAEH,QAAS,IAaNI,MAVf,WACE,OACA,qCACE,cAACX,EAAD,CAAWY,QAAQ,YACnB,cAACP,EAAD,IACA,cAAC,EAAD,QCpBWQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e8420c16.chunk.js","sourcesContent":["export function insertionSort(array) {\r\n\r\n    let i = 0\r\n\r\n    while (i < array.length - 1) {\r\n        if (array[i] > array[i+1]){\r\n            let temp = array[i+1];\r\n            array[i+1] = array[i];\r\n            array[i] = temp;\r\n            break;\r\n        }\r\n        i++\r\n    }\r\n\r\n    return array\r\n}\r\n","import { motion } from 'framer-motion';\r\nimport styled from 'styled-components';\r\nimport React, { useState } from 'react';\r\nimport { insertionSort } from \"./InsertionSort.js\"\r\n\r\nconst Element = styled.div(({height}) => (`\r\n    background: green;\r\n    width: 10px;\r\n    height: ${height}px;\r\n    align-self: flex-end;\r\n    margin: 1px;\r\n`));\r\n\r\nconst ElementWrapper = styled.div`\r\n    display: flex;\r\n    background: yellow;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n`;\r\n\r\nclass SortVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            viz: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const array = Array.from({length: 20}, (x, i) => Math.random()*200);\r\n        \r\n        console.log(array);\r\n\r\n        this.setState({\r\n            array: array, \r\n        });\r\n    }\r\n\r\n    change = () => {\r\n        console.log('hej2')\r\n        this.setState({\r\n            array:  insertionSort(this.state.array), \r\n        });\r\n       \r\n        /*this.setState(state => {\r\n          const array = state.array.concat(this.state.array[this.state.array.length-1] + 1);\r\n     \r\n          return {\r\n            array   \r\n          };\r\n        });*/\r\n      };\r\n    \r\n\r\n\r\n    render() {\r\n        return ( \r\n            <ElementWrapper onClick={this.change}>\r\n                {this.state.array.map(height => <Element height={height}/>)}\r\n            </ElementWrapper>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst SortVisualizer2 = (viz) => {\r\nconst [count, setCount] = useState([<Element height={100}/>,<Element height={200}/>,<Element height={300}/>]);\r\n  return(\r\n  <ElementWrapper>\r\n    {viz.map((x) => x)}\r\n  </ElementWrapper>)\r\n}\r\n\r\n\r\n\r\n\r\nexport default SortVisualizer;\r\n","//import './App.css';\nimport SortVisualizer from './SortVisualizer.js'\n\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\n\nconst BoxStyled = styled(motion.div).attrs(() => ({\n  initial: \"hidden\",\n  variants}))`\n    display: flex;\n    background: blue;\n    width: 150px;\n    height: 150px;\n  `;\n\n  const Box = styled(motion.div)`\n  background: red;\n  width: 150px;\n  height: 150px;\n`;\n\n\nconst variants = {\n  visible: { opacity: 1, transition: { duration: 3 } },\n  hidden: { opacity: 0 }\n};\n\nfunction App() {\n  return (\n  <>\n    <BoxStyled animate=\"visible\"/>\n    <Box/>\n    <SortVisualizer/>\n  </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}